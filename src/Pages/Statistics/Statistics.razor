@page "/statistics"
@using ClubManagementSystem.Data
@using Microsoft.EntityFrameworkCore

<PageTitle>Statistics</PageTitle>

<MudGrid>
    <MudItem xs="12">
        <MudPaper Class="pa-2">
            <MudText Typo="Typo.h6" Align="Align.Center" GutterBottom="true">Memberships</MudText>
            <MudChart ChartType="ChartType.Donut" Width="300px" Height="300px" InputData="@_donutData" InputLabels="@_donutLabels">
                <CustomGraphics>
                    <text class="donut-inner-text" x="47%" y="35%" dominant-baseline="middle" text-anchor="middle" fill="#b2b0bf" font-family="Montserrat" font-size="3">Total</text>
                    <text class="donut-inner-text" x="47%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="#b2b0bf" font-family="Montserrat" font-size="4">@_donutData.Sum().ToString()</text>
                </CustomGraphics>
            </MudChart>
        </MudPaper>
    </MudItem>
    <MudItem xs="12">
        <MudPaper Class="pa-2">
            <MudChart ChartType="ChartType.Line" ChartSeries="@Series" @bind-SelectedIndex="Index" XAxisLabels="@XAxisLabels" Width="100%" Height="350px"></MudChart>
@*            <MudButton @onclick="RandomizeData">Randomize Data</MudButton>
            <MudText Typo="Typo.h6">Selected portion of the chart: @Index</MudText>*@
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private double[] _donutData = new double[2];
    private string[] _donutLabels = { "Active", "Expired" };

    private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.

    [Inject]
    private IDbContextFactory<AppDbContext> _dbContextFactory { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        using var context = _dbContextFactory.CreateDbContext();
        var memberships = await context.Memberships.ToListAsync();
        var activeCount = memberships.Count(m => m.IsActive);
        var expiredCount = memberships.Count - activeCount;
        _donutData[0] = activeCount;
        _donutData[1] = expiredCount;
    }

    public List<ChartSeries> Series = new List<ChartSeries>()
    {
        new ChartSeries() { Name = "Series 1", Data = new double[] { 90, 79, 72, 69, 62, 62, 55, 65, 70 } },
        new ChartSeries() { Name = "Series 2", Data = new double[] { 10, 41, 35, 51, 49, 62, 69, 91, 148 } },
    };
    public string[] XAxisLabels = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };

    Random random = new Random();
    public void RandomizeData()
    {
        var new_series = new List<ChartSeries>()
        {
            new ChartSeries() { Name = "Series 1", Data = new double[9] },
            new ChartSeries() { Name = "Series 2", Data = new double[9] },
        };
        for (int i = 0; i < 9; i++)
        {
            new_series[0].Data[i] = random.NextDouble() * 100;
            new_series[1].Data[i] = random.NextDouble() * 100;
        }
        Series = new_series;
        StateHasChanged();
    }
}